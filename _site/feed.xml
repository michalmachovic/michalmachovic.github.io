<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-08T07:42:56+02:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Angular: Data Binding</title><link href="http://localhost:4000/angular/2017/08/08/angular-data-binding.html" rel="alternate" type="text/html" title="Angular: Data Binding" /><published>2017-08-08T06:13:26+02:00</published><updated>2017-08-08T06:13:26+02:00</updated><id>http://localhost:4000/angular/2017/08/08/angular-data-binding</id><content type="html" xml:base="http://localhost:4000/angular/2017/08/08/angular-data-binding.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/servers/servers.component.ts&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@angular/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-servers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./servers.component.html'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServersComponent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;nx&quot;&gt;allowNewServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;serverId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;serverStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'offline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;setTimeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allowNewServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;ngOnInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;String interpolation&lt;/h2&gt;
&lt;p&gt;This is one way data binding, we are just printing out &lt;code class=&quot;highlighter-rouge&quot;&gt;serverId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;serverStatus&lt;/code&gt; property.
&lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;app/servers/servers.component.html&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serverId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serverStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Property Binding&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/servers/servers.component.html&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;!allowNewServer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="angular" /><category term="angular" /><summary type="html">app/servers/servers.component.ts import { Component, OnInit } from '@angular/core'; @Component({ selector: 'app-servers', templateUrl: './servers.component.html' }) export class ServersComponent implements OnInit { allowNewServer = false; serverId = 10; serverStatus = 'offline'; constructor() { setTimeOut(() =&amp;gt; { this.allowNewServer = true; },2000); } ngOnInit() { } } String interpolation This is one way data binding, we are just printing out serverId and serverStatus property. app/servers/servers.component.html {{serverId}} is {{serverStatus}} Property Binding app/servers/servers.component.html &amp;lt;button [disabled]=&quot;!allowNewServer&quot;&amp;gt;Add Server&amp;lt;/button&amp;gt;</summary></entry><entry><title type="html">Toolkit</title><link href="http://localhost:4000/toolkit/2017/08/07/toolkit.html" rel="alternate" type="text/html" title="Toolkit" /><published>2017-08-07T10:13:26+02:00</published><updated>2017-08-07T10:13:26+02:00</updated><id>http://localhost:4000/toolkit/2017/08/07/toolkit</id><content type="html" xml:base="http://localhost:4000/toolkit/2017/08/07/toolkit.html">&lt;p&gt;Emmet - plugin which greatly improves html &amp;amp; css workflow&lt;/p&gt;</content><author><name></name></author><category term="toolkit" /><category term="toolkit" /><summary type="html">Emmet - plugin which greatly improves html &amp;amp; css workflow</summary></entry><entry><title type="html">Angular: New component</title><link href="http://localhost:4000/angular/2017/08/07/angular-new-component.html" rel="alternate" type="text/html" title="Angular: New component" /><published>2017-08-07T10:13:26+02:00</published><updated>2017-08-07T10:13:26+02:00</updated><id>http://localhost:4000/angular/2017/08/07/angular-new-component</id><content type="html" xml:base="http://localhost:4000/angular/2017/08/07/angular-new-component.html">&lt;p&gt;Components can be created from cli by running &lt;code class=&quot;highlighter-rouge&quot;&gt;ng generate component servers&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ng g c servers&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt; is name of component.&lt;/p&gt;

&lt;p&gt;Here we will describe how to it manually.
Component is basicaly a typescript class. We will create new component called &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;src/app/server/server.component.ts&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@angular/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./server.component.html'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServerComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;serverId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;serverStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'offline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; will import component decorator&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; is decorator - typescript feature which will enhance our class&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; is selector by which we will identify it and use in other component templates (html files)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;src/app/server/server.component.html&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Server with id {{serverId}} is {{serverStatus}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;src/app/app.module.ts&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServerComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./server/server.component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
	   &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	   &lt;span class=&quot;nx&quot;&gt;ServerComponent&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;src/app/app.component.html&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/app-server&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="angular" /><category term="angular" /><summary type="html">Components can be created from cli by running ng generate component servers or ng g c servers where servers is name of component. Here we will describe how to it manually. Component is basicaly a typescript class. We will create new component called server.</summary></entry><entry><title type="html">Jekyll: Run site locally</title><link href="http://localhost:4000/jekyll/2017/08/01/jekyll-github-pages-local.html" rel="alternate" type="text/html" title="Jekyll: Run site locally" /><published>2017-08-01T10:12:26+02:00</published><updated>2017-08-01T10:12:26+02:00</updated><id>http://localhost:4000/jekyll/2017/08/01/jekyll-github-pages-local</id><content type="html" xml:base="http://localhost:4000/jekyll/2017/08/01/jekyll-github-pages-local.html">&lt;p&gt;When you want to run your jekyll site locally, run this in terminal&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now open http://localhost:4000, you should see your site.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="jekyll" /><category term="github" /><summary type="html">When you want to run your jekyll site locally, run this in terminal bundle exec jekyll serve Now open http://localhost:4000, you should see your site.</summary></entry><entry><title type="html">Design: Free Resources</title><link href="http://localhost:4000/design/2017/07/27/design-free-resources.html" rel="alternate" type="text/html" title="Design: Free Resources" /><published>2017-07-27T13:13:26+02:00</published><updated>2017-07-27T13:13:26+02:00</updated><id>http://localhost:4000/design/2017/07/27/design-free-resources</id><content type="html" xml:base="http://localhost:4000/design/2017/07/27/design-free-resources.html">&lt;p&gt;https://www.websupport.sk/blog/2016/02/kde-najst-obrazky-zadarmo-pre-vas-web/&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.unsplash.com&quot;&gt;http://www.unsplash.com&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="design" /><category term="design" /><summary type="html">https://www.websupport.sk/blog/2016/02/kde-najst-obrazky-zadarmo-pre-vas-web/ http://www.unsplash.com</summary></entry><entry><title type="html">Angular: New app</title><link href="http://localhost:4000/angular/2017/07/27/angular-new-app.html" rel="alternate" type="text/html" title="Angular: New app" /><published>2017-07-27T10:13:26+02:00</published><updated>2017-07-27T10:13:26+02:00</updated><id>http://localhost:4000/angular/2017/07/27/angular-new-app</id><content type="html" xml:base="http://localhost:4000/angular/2017/07/27/angular-new-app.html">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;ng new my-dream-app
cd my-dream-app
npm install --save bootstrap  (for bootstrap)
ng serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To include bootstrap open file .angular-cli.json and into styles array 	insert&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt; &quot;../node_modules/bootstrap/dist/css/bootstrap.min.css&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now go to &lt;a href=&quot;http://localhost:4200&quot;&gt;http://localhost:4200&lt;/a&gt; and you will see your app.&lt;/p&gt;</content><author><name></name></author><category term="angular" /><category term="angular" /><summary type="html">ng new my-dream-app cd my-dream-app npm install --save bootstrap (for bootstrap) ng serve To include bootstrap open file .angular-cli.json and into styles array insert &quot;../node_modules/bootstrap/dist/css/bootstrap.min.css&quot; Now go to http://localhost:4200 and you will see your app.</summary></entry><entry><title type="html">Angular: Installation</title><link href="http://localhost:4000/angular/2017/07/27/angular-installation.html" rel="alternate" type="text/html" title="Angular: Installation" /><published>2017-07-27T10:12:26+02:00</published><updated>2017-07-27T10:12:26+02:00</updated><id>http://localhost:4000/angular/2017/07/27/angular-installation</id><content type="html" xml:base="http://localhost:4000/angular/2017/07/27/angular-installation.html">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo npm install --unsafe-perm --verbose -g sails
npm install -g @angular/cli&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions&quot;&gt;https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="angular" /><category term="angular" /><summary type="html">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - sudo apt-get install -y nodejs sudo npm install --unsafe-perm --verbose -g sails npm install -g @angular/cli https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions</summary></entry><entry><title type="html">Magento2: Write message to log</title><link href="http://localhost:4000/magento2/2017/07/27/magento2-log.html" rel="alternate" type="text/html" title="Magento2: Write message to log" /><published>2017-07-27T10:11:26+02:00</published><updated>2017-07-27T10:11:26+02:00</updated><id>http://localhost:4000/magento2/2017/07/27/magento2-log</id><content type="html" xml:base="http://localhost:4000/magento2/2017/07/27/magento2-log.html">&lt;p&gt;Here is how you can log to Magento2 debug.log file, located under &lt;code class=&quot;highlighter-rouge&quot;&gt;var/system/log&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt; logger = \Magento\Framework\App\ObjectManager::getInstance()-&amp;gt;get('\Psr\Log\LoggerInterface');
 $logger-&amp;gt;debug('TEST');&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="magento2" /><category term="magento2" /><summary type="html">Here is how you can log to Magento2 debug.log file, located under var/system/log. logger = \Magento\Framework\App\ObjectManager::getInstance()-&amp;gt;get('\Psr\Log\LoggerInterface'); $logger-&amp;gt;debug('TEST');</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/07/27/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-07-27T00:11:26+02:00</published><updated>2017-07-27T00:11:26+02:00</updated><id>http://localhost:4000/jekyll/update/2017/07/27/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/07/27/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry></feed>